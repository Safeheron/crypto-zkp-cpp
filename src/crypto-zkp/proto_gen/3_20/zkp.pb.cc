// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zkp.proto

#include "zkp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
PROTOBUF_CONSTEXPR DLogProof::DLogProof(
    ::_pbi::ConstantInitialized)
  : res_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pk_(nullptr)
  , g_r_(nullptr){}
struct DLogProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DLogProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DLogProofDefaultTypeInternal() {}
  union {
    DLogProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DLogProofDefaultTypeInternal _DLogProof_default_instance_;
PROTOBUF_CONSTEXPR HegProof::HegProof(
    ::_pbi::ConstantInitialized)
  : z1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , z2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , t_(nullptr)
  , a3_(nullptr){}
struct HegProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HegProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HegProofDefaultTypeInternal() {}
  union {
    HegProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HegProofDefaultTypeInternal _HegProof_default_instance_;
PROTOBUF_CONSTEXPR PailProof::PailProof(
    ::_pbi::ConstantInitialized)
  : y_n_arr_(){}
struct PailProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PailProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PailProofDefaultTypeInternal() {}
  union {
    PailProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PailProofDefaultTypeInternal _PailProof_default_instance_;
PROTOBUF_CONSTEXPR AliceRangeProof::AliceRangeProof(
    ::_pbi::ConstantInitialized)
  : z_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , u_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , w_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , s_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , s1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , s2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AliceRangeProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AliceRangeProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AliceRangeProofDefaultTypeInternal() {}
  union {
    AliceRangeProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AliceRangeProofDefaultTypeInternal _AliceRangeProof_default_instance_;
PROTOBUF_CONSTEXPR DLNProof::DLNProof(
    ::_pbi::ConstantInitialized)
  : alpha_arr_()
  , t_arr_(){}
struct DLNProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DLNProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DLNProofDefaultTypeInternal() {}
  union {
    DLNProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DLNProofDefaultTypeInternal _DLNProof_default_instance_;
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_zkp_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zkp_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zkp_2eproto = nullptr;

const uint32_t TableStruct_zkp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLogProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLogProof, pk_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLogProof, g_r_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLogProof, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, t_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, a3_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, z1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, z2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::PailProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::PailProof, y_n_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, z_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, u_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, w_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, s_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, s1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, s2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLNProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLNProof, alpha_arr_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLNProof, t_arr_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::DLogProof)},
  { 9, -1, -1, sizeof(::safeheron::proto::HegProof)},
  { 19, -1, -1, sizeof(::safeheron::proto::PailProof)},
  { 26, -1, -1, sizeof(::safeheron::proto::AliceRangeProof)},
  { 38, -1, -1, sizeof(::safeheron::proto::DLNProof)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::_DLogProof_default_instance_._instance,
  &::safeheron::proto::_HegProof_default_instance_._instance,
  &::safeheron::proto::_PailProof_default_instance_._instance,
  &::safeheron::proto::_AliceRangeProof_default_instance_._instance,
  &::safeheron::proto::_DLNProof_default_instance_._instance,
};

const char descriptor_table_protodef_zkp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tzkp.proto\022\017safeheron.proto\032\021curve_poin"
  "t.proto\"k\n\tDLogProof\022\'\n\002pk\030\001 \001(\0132\033.safeh"
  "eron.proto.CurvePoint\022(\n\003g_r\030\002 \001(\0132\033.saf"
  "eheron.proto.CurvePoint\022\013\n\003res\030\003 \001(\t\"s\n\010"
  "HegProof\022&\n\001T\030\001 \001(\0132\033.safeheron.proto.Cu"
  "rvePoint\022\'\n\002A3\030\002 \001(\0132\033.safeheron.proto.C"
  "urvePoint\022\n\n\002z1\030\003 \001(\t\022\n\n\002z2\030\004 \001(\t\"\034\n\tPai"
  "lProof\022\017\n\007y_N_arr\030\001 \003(\t\"U\n\017AliceRangePro"
  "of\022\t\n\001z\030\001 \001(\t\022\t\n\001u\030\002 \001(\t\022\t\n\001w\030\003 \001(\t\022\t\n\001s"
  "\030\004 \001(\t\022\n\n\002s1\030\005 \001(\t\022\n\n\002s2\030\006 \001(\t\",\n\010DLNPro"
  "of\022\021\n\talpha_arr\030\001 \003(\t\022\r\n\005t_arr\030\002 \003(\tb\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zkp_2eproto_deps[1] = {
  &::descriptor_table_curve_5fpoint_2eproto,
};
static ::_pbi::once_flag descriptor_table_zkp_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zkp_2eproto = {
    false, false, 444, descriptor_table_protodef_zkp_2eproto,
    "zkp.proto",
    &descriptor_table_zkp_2eproto_once, descriptor_table_zkp_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_zkp_2eproto::offsets,
    file_level_metadata_zkp_2eproto, file_level_enum_descriptors_zkp_2eproto,
    file_level_service_descriptors_zkp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zkp_2eproto_getter() {
  return &descriptor_table_zkp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zkp_2eproto(&descriptor_table_zkp_2eproto);
namespace safeheron {
namespace proto {

// ===================================================================

class DLogProof::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& pk(const DLogProof* msg);
  static const ::safeheron::proto::CurvePoint& g_r(const DLogProof* msg);
};

const ::safeheron::proto::CurvePoint&
DLogProof::_Internal::pk(const DLogProof* msg) {
  return *msg->pk_;
}
const ::safeheron::proto::CurvePoint&
DLogProof::_Internal::g_r(const DLogProof* msg) {
  return *msg->g_r_;
}
void DLogProof::clear_pk() {
  if (GetArenaForAllocation() == nullptr && pk_ != nullptr) {
    delete pk_;
  }
  pk_ = nullptr;
}
void DLogProof::clear_g_r() {
  if (GetArenaForAllocation() == nullptr && g_r_ != nullptr) {
    delete g_r_;
  }
  g_r_ = nullptr;
}
DLogProof::DLogProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.DLogProof)
}
DLogProof::DLogProof(const DLogProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    res_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res().empty()) {
    res_.Set(from._internal_res(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pk()) {
    pk_ = new ::safeheron::proto::CurvePoint(*from.pk_);
  } else {
    pk_ = nullptr;
  }
  if (from._internal_has_g_r()) {
    g_r_ = new ::safeheron::proto::CurvePoint(*from.g_r_);
  } else {
    g_r_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.DLogProof)
}

inline void DLogProof::SharedCtor() {
res_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  res_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&g_r_) -
    reinterpret_cast<char*>(&pk_)) + sizeof(g_r_));
}

DLogProof::~DLogProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.DLogProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DLogProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  res_.Destroy();
  if (this != internal_default_instance()) delete pk_;
  if (this != internal_default_instance()) delete g_r_;
}

void DLogProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DLogProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.DLogProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pk_ != nullptr) {
    delete pk_;
  }
  pk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && g_r_ != nullptr) {
    delete g_r_;
  }
  g_r_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLogProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_r(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_res();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.DLogProof.res"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DLogProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.DLogProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint pk = 1;
  if (this->_internal_has_pk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pk(this),
        _Internal::pk(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint g_r = 2;
  if (this->_internal_has_g_r()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::g_r(this),
        _Internal::g_r(this).GetCachedSize(), target, stream);
  }

  // string res = 3;
  if (!this->_internal_res().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res().data(), static_cast<int>(this->_internal_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.DLogProof.res");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.DLogProof)
  return target;
}

size_t DLogProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.DLogProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res = 3;
  if (!this->_internal_res().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res());
  }

  // .safeheron.proto.CurvePoint pk = 1;
  if (this->_internal_has_pk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pk_);
  }

  // .safeheron.proto.CurvePoint g_r = 2;
  if (this->_internal_has_g_r()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_r_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DLogProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DLogProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DLogProof::GetClassData() const { return &_class_data_; }

void DLogProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DLogProof *>(to)->MergeFrom(
      static_cast<const DLogProof &>(from));
}


void DLogProof::MergeFrom(const DLogProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.DLogProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_res().empty()) {
    _internal_set_res(from._internal_res());
  }
  if (from._internal_has_pk()) {
    _internal_mutable_pk()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_pk());
  }
  if (from._internal_has_g_r()) {
    _internal_mutable_g_r()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_r());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DLogProof::CopyFrom(const DLogProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.DLogProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLogProof::IsInitialized() const {
  return true;
}

void DLogProof::InternalSwap(DLogProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &res_, lhs_arena,
      &other->res_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DLogProof, g_r_)
      + sizeof(DLogProof::g_r_)
      - PROTOBUF_FIELD_OFFSET(DLogProof, pk_)>(
          reinterpret_cast<char*>(&pk_),
          reinterpret_cast<char*>(&other->pk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DLogProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zkp_2eproto_getter, &descriptor_table_zkp_2eproto_once,
      file_level_metadata_zkp_2eproto[0]);
}

// ===================================================================

class HegProof::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& t(const HegProof* msg);
  static const ::safeheron::proto::CurvePoint& a3(const HegProof* msg);
};

const ::safeheron::proto::CurvePoint&
HegProof::_Internal::t(const HegProof* msg) {
  return *msg->t_;
}
const ::safeheron::proto::CurvePoint&
HegProof::_Internal::a3(const HegProof* msg) {
  return *msg->a3_;
}
void HegProof::clear_t() {
  if (GetArenaForAllocation() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
void HegProof::clear_a3() {
  if (GetArenaForAllocation() == nullptr && a3_ != nullptr) {
    delete a3_;
  }
  a3_ = nullptr;
}
HegProof::HegProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.HegProof)
}
HegProof::HegProof(const HegProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  z1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    z1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_z1().empty()) {
    z1_.Set(from._internal_z1(), 
      GetArenaForAllocation());
  }
  z2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    z2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_z2().empty()) {
    z2_.Set(from._internal_z2(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_t()) {
    t_ = new ::safeheron::proto::CurvePoint(*from.t_);
  } else {
    t_ = nullptr;
  }
  if (from._internal_has_a3()) {
    a3_ = new ::safeheron::proto::CurvePoint(*from.a3_);
  } else {
    a3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.HegProof)
}

inline void HegProof::SharedCtor() {
z1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  z1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
z2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  z2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a3_) -
    reinterpret_cast<char*>(&t_)) + sizeof(a3_));
}

HegProof::~HegProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.HegProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HegProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  z1_.Destroy();
  z2_.Destroy();
  if (this != internal_default_instance()) delete t_;
  if (this != internal_default_instance()) delete a3_;
}

void HegProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HegProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.HegProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  z1_.ClearToEmpty();
  z2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  if (GetArenaForAllocation() == nullptr && a3_ != nullptr) {
    delete a3_;
  }
  a3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HegProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint T = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint A3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_a3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string z1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_z1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.HegProof.z1"));
        } else
          goto handle_unusual;
        continue;
      // string z2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_z2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.HegProof.z2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HegProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.HegProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint T = 1;
  if (this->_internal_has_t()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::t(this),
        _Internal::t(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint A3 = 2;
  if (this->_internal_has_a3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::a3(this),
        _Internal::a3(this).GetCachedSize(), target, stream);
  }

  // string z1 = 3;
  if (!this->_internal_z1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z1().data(), static_cast<int>(this->_internal_z1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.HegProof.z1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_z1(), target);
  }

  // string z2 = 4;
  if (!this->_internal_z2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z2().data(), static_cast<int>(this->_internal_z2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.HegProof.z2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_z2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.HegProof)
  return target;
}

size_t HegProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.HegProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string z1 = 3;
  if (!this->_internal_z1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z1());
  }

  // string z2 = 4;
  if (!this->_internal_z2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z2());
  }

  // .safeheron.proto.CurvePoint T = 1;
  if (this->_internal_has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .safeheron.proto.CurvePoint A3 = 2;
  if (this->_internal_has_a3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a3_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HegProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HegProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HegProof::GetClassData() const { return &_class_data_; }

void HegProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HegProof *>(to)->MergeFrom(
      static_cast<const HegProof &>(from));
}


void HegProof::MergeFrom(const HegProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.HegProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_z1().empty()) {
    _internal_set_z1(from._internal_z1());
  }
  if (!from._internal_z2().empty()) {
    _internal_set_z2(from._internal_z2());
  }
  if (from._internal_has_t()) {
    _internal_mutable_t()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_t());
  }
  if (from._internal_has_a3()) {
    _internal_mutable_a3()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_a3());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HegProof::CopyFrom(const HegProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.HegProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HegProof::IsInitialized() const {
  return true;
}

void HegProof::InternalSwap(HegProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &z1_, lhs_arena,
      &other->z1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &z2_, lhs_arena,
      &other->z2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HegProof, a3_)
      + sizeof(HegProof::a3_)
      - PROTOBUF_FIELD_OFFSET(HegProof, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HegProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zkp_2eproto_getter, &descriptor_table_zkp_2eproto_once,
      file_level_metadata_zkp_2eproto[1]);
}

// ===================================================================

class PailProof::_Internal {
 public:
};

PailProof::PailProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  y_n_arr_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.PailProof)
}
PailProof::PailProof(const PailProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      y_n_arr_(from.y_n_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.PailProof)
}

inline void PailProof::SharedCtor() {
}

PailProof::~PailProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.PailProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PailProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PailProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PailProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.PailProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  y_n_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PailProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string y_N_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_y_n_arr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.PailProof.y_N_arr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PailProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.PailProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string y_N_arr = 1;
  for (int i = 0, n = this->_internal_y_n_arr_size(); i < n; i++) {
    const auto& s = this->_internal_y_n_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.PailProof.y_N_arr");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.PailProof)
  return target;
}

size_t PailProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.PailProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string y_N_arr = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(y_n_arr_.size());
  for (int i = 0, n = y_n_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      y_n_arr_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PailProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PailProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PailProof::GetClassData() const { return &_class_data_; }

void PailProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PailProof *>(to)->MergeFrom(
      static_cast<const PailProof &>(from));
}


void PailProof::MergeFrom(const PailProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.PailProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  y_n_arr_.MergeFrom(from.y_n_arr_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PailProof::CopyFrom(const PailProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.PailProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PailProof::IsInitialized() const {
  return true;
}

void PailProof::InternalSwap(PailProof* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  y_n_arr_.InternalSwap(&other->y_n_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PailProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zkp_2eproto_getter, &descriptor_table_zkp_2eproto_once,
      file_level_metadata_zkp_2eproto[2]);
}

// ===================================================================

class AliceRangeProof::_Internal {
 public:
};

AliceRangeProof::AliceRangeProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.AliceRangeProof)
}
AliceRangeProof::AliceRangeProof(const AliceRangeProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  z_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    z_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_z().empty()) {
    z_.Set(from._internal_z(), 
      GetArenaForAllocation());
  }
  u_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    u_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_u().empty()) {
    u_.Set(from._internal_u(), 
      GetArenaForAllocation());
  }
  w_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    w_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_w().empty()) {
    w_.Set(from._internal_w(), 
      GetArenaForAllocation());
  }
  s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    s_.Set(from._internal_s(), 
      GetArenaForAllocation());
  }
  s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s1().empty()) {
    s1_.Set(from._internal_s1(), 
      GetArenaForAllocation());
  }
  s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s2().empty()) {
    s2_.Set(from._internal_s2(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.AliceRangeProof)
}

inline void AliceRangeProof::SharedCtor() {
z_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  z_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
u_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  u_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
w_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  w_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
s_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
s1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
s2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AliceRangeProof::~AliceRangeProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.AliceRangeProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AliceRangeProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  z_.Destroy();
  u_.Destroy();
  w_.Destroy();
  s_.Destroy();
  s1_.Destroy();
  s2_.Destroy();
}

void AliceRangeProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AliceRangeProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.AliceRangeProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  z_.ClearToEmpty();
  u_.ClearToEmpty();
  w_.ClearToEmpty();
  s_.ClearToEmpty();
  s1_.ClearToEmpty();
  s2_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AliceRangeProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string z = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_z();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.z"));
        } else
          goto handle_unusual;
        continue;
      // string u = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_u();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.u"));
        } else
          goto handle_unusual;
        continue;
      // string w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_w();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.w"));
        } else
          goto handle_unusual;
        continue;
      // string s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.s"));
        } else
          goto handle_unusual;
        continue;
      // string s1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_s1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.s1"));
        } else
          goto handle_unusual;
        continue;
      // string s2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_s2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.s2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AliceRangeProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.AliceRangeProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string z = 1;
  if (!this->_internal_z().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z().data(), static_cast<int>(this->_internal_z().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.z");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_z(), target);
  }

  // string u = 2;
  if (!this->_internal_u().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_u().data(), static_cast<int>(this->_internal_u().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.u");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_u(), target);
  }

  // string w = 3;
  if (!this->_internal_w().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_w().data(), static_cast<int>(this->_internal_w().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.w");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_w(), target);
  }

  // string s = 4;
  if (!this->_internal_s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.s");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_s(), target);
  }

  // string s1 = 5;
  if (!this->_internal_s1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s1().data(), static_cast<int>(this->_internal_s1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.s1");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_s1(), target);
  }

  // string s2 = 6;
  if (!this->_internal_s2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2().data(), static_cast<int>(this->_internal_s2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.s2");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_s2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.AliceRangeProof)
  return target;
}

size_t AliceRangeProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.AliceRangeProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string z = 1;
  if (!this->_internal_z().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z());
  }

  // string u = 2;
  if (!this->_internal_u().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_u());
  }

  // string w = 3;
  if (!this->_internal_w().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_w());
  }

  // string s = 4;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  // string s1 = 5;
  if (!this->_internal_s1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s1());
  }

  // string s2 = 6;
  if (!this->_internal_s2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AliceRangeProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AliceRangeProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AliceRangeProof::GetClassData() const { return &_class_data_; }

void AliceRangeProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AliceRangeProof *>(to)->MergeFrom(
      static_cast<const AliceRangeProof &>(from));
}


void AliceRangeProof::MergeFrom(const AliceRangeProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.AliceRangeProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_z().empty()) {
    _internal_set_z(from._internal_z());
  }
  if (!from._internal_u().empty()) {
    _internal_set_u(from._internal_u());
  }
  if (!from._internal_w().empty()) {
    _internal_set_w(from._internal_w());
  }
  if (!from._internal_s().empty()) {
    _internal_set_s(from._internal_s());
  }
  if (!from._internal_s1().empty()) {
    _internal_set_s1(from._internal_s1());
  }
  if (!from._internal_s2().empty()) {
    _internal_set_s2(from._internal_s2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AliceRangeProof::CopyFrom(const AliceRangeProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.AliceRangeProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliceRangeProof::IsInitialized() const {
  return true;
}

void AliceRangeProof::InternalSwap(AliceRangeProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &z_, lhs_arena,
      &other->z_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &u_, lhs_arena,
      &other->u_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &w_, lhs_arena,
      &other->w_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &s_, lhs_arena,
      &other->s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &s1_, lhs_arena,
      &other->s1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &s2_, lhs_arena,
      &other->s2_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AliceRangeProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zkp_2eproto_getter, &descriptor_table_zkp_2eproto_once,
      file_level_metadata_zkp_2eproto[3]);
}

// ===================================================================

class DLNProof::_Internal {
 public:
};

DLNProof::DLNProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  alpha_arr_(arena),
  t_arr_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.DLNProof)
}
DLNProof::DLNProof(const DLNProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alpha_arr_(from.alpha_arr_),
      t_arr_(from.t_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.DLNProof)
}

inline void DLNProof::SharedCtor() {
}

DLNProof::~DLNProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.DLNProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DLNProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DLNProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DLNProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.DLNProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_arr_.Clear();
  t_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLNProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string alpha_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_alpha_arr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.DLNProof.alpha_arr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string t_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_t_arr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.DLNProof.t_arr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DLNProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.DLNProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string alpha_arr = 1;
  for (int i = 0, n = this->_internal_alpha_arr_size(); i < n; i++) {
    const auto& s = this->_internal_alpha_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.DLNProof.alpha_arr");
    target = stream->WriteString(1, s, target);
  }

  // repeated string t_arr = 2;
  for (int i = 0, n = this->_internal_t_arr_size(); i < n; i++) {
    const auto& s = this->_internal_t_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.DLNProof.t_arr");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.DLNProof)
  return target;
}

size_t DLNProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.DLNProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string alpha_arr = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alpha_arr_.size());
  for (int i = 0, n = alpha_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alpha_arr_.Get(i));
  }

  // repeated string t_arr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(t_arr_.size());
  for (int i = 0, n = t_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      t_arr_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DLNProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DLNProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DLNProof::GetClassData() const { return &_class_data_; }

void DLNProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DLNProof *>(to)->MergeFrom(
      static_cast<const DLNProof &>(from));
}


void DLNProof::MergeFrom(const DLNProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.DLNProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  alpha_arr_.MergeFrom(from.alpha_arr_);
  t_arr_.MergeFrom(from.t_arr_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DLNProof::CopyFrom(const DLNProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.DLNProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLNProof::IsInitialized() const {
  return true;
}

void DLNProof::InternalSwap(DLNProof* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  alpha_arr_.InternalSwap(&other->alpha_arr_);
  t_arr_.InternalSwap(&other->t_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DLNProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zkp_2eproto_getter, &descriptor_table_zkp_2eproto_once,
      file_level_metadata_zkp_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::DLogProof*
Arena::CreateMaybeMessage< ::safeheron::proto::DLogProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::DLogProof >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::HegProof*
Arena::CreateMaybeMessage< ::safeheron::proto::HegProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::HegProof >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::PailProof*
Arena::CreateMaybeMessage< ::safeheron::proto::PailProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::PailProof >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::AliceRangeProof*
Arena::CreateMaybeMessage< ::safeheron::proto::AliceRangeProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::AliceRangeProof >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::DLNProof*
Arena::CreateMaybeMessage< ::safeheron::proto::DLNProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::DLNProof >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
